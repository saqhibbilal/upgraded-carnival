[
  {
    "id": 1,
    "title": "Binary Search",
    "difficulty": "Easy",
    "question": "You are given a sorted array of N integers and a target number T. Implement binary search to find the index of T in the array. If not found, return -1.",
    "input_format": "The first line contains an integer N. The second line contains N space-separated integers in ascending order. The third line contains a single integer T.",
    "output_format": "Return the index (0-based) of the target integer if found. Otherwise, return -1.",
    "constraints": "1 <= N <= 10^5\n-10^9 <= arr[i], T <= 10^9",
    "sample_input": "5\n1 3 5 7 9\n5",
    "sample_output": 2,
    "hint": "Use the divide-and-conquer strategy to minimize time complexity.",
    "hidden_inputs": ["6\n2 4 6 8 10 12\n8", "4\n1 2 3 4\n7"],
    "hidden_outputs": [3, -1]
  },
  {
    "id": 2,
    "title": "Palindrome String",
    "difficulty": "Easy",
    "question": "Given a string, check whether it is a palindrome (reads the same forwards and backwards). Ignore case sensitivity.",
    "input_format": "A single line containing a string S.",
    "output_format": "Return True if S is a palindrome, otherwise False.",
    "constraints": "1 <= len(S) <= 10^5",
    "sample_input": "Radar",
    "sample_output": "True",
    "hint": "Convert to lowercase and compare reversed string.",
    "hidden_inputs": ["Malayalam", "Python"],
    "hidden_outputs": ["True", "False"]
  },
  {
    "id": 3,
    "title": "Factorial",
    "difficulty": "Easy",
    "question": "Given a non-negative integer N, compute its factorial (N!).",
    "input_format": "A single integer N.",
    "output_format": "Return the factorial of N.",
    "constraints": "0 <= N <= 20",
    "sample_input": "5",
    "sample_output": 120,
    "hint": "Use a loop or recursion to compute factorial.",
    "hidden_inputs": ["0", "7"],
    "hidden_outputs": [1, 5040]
  },
  {
    "id": 4,
    "title": "Sum of Digits",
    "difficulty": "Easy",
    "question": "Given a positive integer N, return the sum of its digits.",
    "input_format": "A single integer N.",
    "output_format": "Return the sum of the digits.",
    "constraints": "1 <= N <= 10^9",
    "sample_input": "1234",
    "sample_output": 10,
    "hint": "Use modulus and division to extract digits.",
    "hidden_inputs": ["999", "1001"],
    "hidden_outputs": [27, 2]
  },
  {
    "id": 5,
    "title": "Count Vowels",
    "difficulty": "Easy",
    "question": "Given a string S, count the number of vowels (a, e, i, o, u) in it. Case insensitive.",
    "input_format": "A single line containing a string S.",
    "output_format": "Return the number of vowels.",
    "constraints": "1 <= len(S) <= 10^5",
    "sample_input": "Education",
    "sample_output": 5,
    "hint": "Convert to lowercase and iterate to count vowels.",
    "hidden_inputs": ["sky", "OpenAI"],
    "hidden_outputs": [0, 4]
  },
  {
    "id": 6,
    "title": "Reverse String",
    "difficulty": "Easy",
    "question": "Given a string S, return its reverse.",
    "input_format": "A single line containing a string S.",
    "output_format": "Return the reversed string.",
    "constraints": "1 <= len(S) <= 10^5",
    "sample_input": "hello",
    "sample_output": "olleh",
    "hint": "Use slicing or a loop to reverse the string.",
    "hidden_inputs": ["world", "racecar"],
    "hidden_outputs": ["dlrow", "racecar"]
  },
  {
    "id": 7,
    "title": "Even or Odd",
    "difficulty": "Easy",
    "question": "Given an integer N, determine whether it is even or odd.",
    "input_format": "A single integer N.",
    "output_format": "Return Even if N is even, otherwise Odd.",
    "constraints": "-10^9 <= N <= 10^9",
    "sample_input": "7",
    "sample_output": "Odd",
    "hint": "Check if N modulo 2 is 0.",
    "hidden_inputs": ["0", "-4"],
    "hidden_outputs": ["Even", "Even"]
  },
  {
    "id": 8,
    "title": "Count Words",
    "difficulty": "Easy",
    "question": "Given a sentence S, return the number of words in it. Words are separated by spaces.",
    "input_format": "A single line containing a sentence S.",
    "output_format": "Return the number of words.",
    "constraints": "1 <= len(S) <= 10^5",
    "sample_input": "This is a test",
    "sample_output": 4,
    "hint": "Use split() to divide the string by spaces.",
    "hidden_inputs": ["OpenAI is amazing", "OneWord"],
    "hidden_outputs": [3, 1]
  },
  {
    "id": 9,
    "title": "Count Vowels",
    "difficulty": "Easy",
    "question": "Given a sentence S, return the number of vowels (a, e, i, o, u) in it. The sentence may contain uppercase or lowercase letters.",
    "input_format": "A single line containing a sentence S.",
    "output_format": "Return the number of vowels.",
    "constraints": "1 <= len(S) <= 10^5",
    "sample_input": "This is a test",
    "sample_output": 4,
    "hint": "Loop through each character and check if it's a vowel (use lower() to simplify case handling).",
    "hidden_inputs": ["OpenAI is amazing", "Crypts and myths"],
    "hidden_outputs": [7, 0]
  },
  {
    "id": 10,
    "title": "Longest Increasing Subsequence",
    "difficulty": "Medium",
    "question": "Given an array of integers, find the length of the longest increasing subsequence.",
    "input_format": "The first line contains an integer `n` (1 ≤ n ≤ 2500), the number of elements in the array. The second line contains `n` integers, each between -10,000 and 10,000.",
    "output_format": "Output a single integer, the length of the longest increasing subsequence.",
    "constraints": "1 ≤ n ≤ 2500, -10,000 ≤ array elements ≤ 10,000",
    "sample_input": "6\n10 9 2 5 3 7",
    "sample_output": 3,
    "hint": "Use dynamic programming to solve this problem efficiently.",
    "hidden_inputs": [
      "5\n1 3 5 4 7",
      "8\n10 22 9 33 21 50 41 60",
      "10\n3 10 2 1 20 4 5 6 7 8"
    ],
    "hidden_outputs": [
      4,
      5,
      6
    ]
  },
  {
    "id": 11,
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "question": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "input_format": "The input is the head of a singly linked list.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": "The number of nodes in the list is in the range [0, 5000]. -5000 <= Node.val <= 5000",
    "sample_input": "head = [1,2,3,4,5]",
    "sample_output": "[5,4,3,2,1]",
    "hint": "Use three pointers to reverse the linked list iteratively.",
    "hidden_inputs": [
      "[1,2,3,4,5,6,7,8,9,10]",
      "[1]",
      "[]"
    ],
    "hidden_outputs": [
      "[10,9,8,7,6,5,4,3,2,1]",
      "[1]",
      "[]"
    ]
  },
  {
    "id": 12,
    "title": "Reverse a Linked List",
    "difficulty": "Medium",
    "question": "Write a function to reverse a singly linked list.",
    "input_format": "The input is a singly linked list.",
    "output_format": "The output should be the reversed singly linked list.",
    "constraints": "You are not allowed to use any additional data structures.",
    "sample_input": "1 -> 2 -> 3 -> 4 -> 5",
    "sample_output": "5 -> 4 -> 3 -> 2 -> 1",
    "hint": "Use three pointers to reverse the list iteratively.",
    "hidden_inputs": [
      "10 -> 20 -> 30 -> 40 -> 50",
      "1 -> 2 -> 3 -> 4 -> 5 -> 6",
      "7 -> 14 -> 21 -> 28"
    ],
    "hidden_outputs": [
      "50 -> 40 -> 30 -> 20 -> 10",
      "6 -> 5 -> 4 -> 3 -> 2 -> 1",
      "28 -> 21 -> 14 -> 7"
    ]
  },
  {
    "id": 13,
    "title": "Reverse a Linked List",
    "difficulty": "Medium",
    "question": "Write a function to reverse a singly linked list.",
    "input_format": "The function will take the head of a singly linked list as input.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": "The linked list can be empty or contain up to 10^4 nodes.",
    "sample_input": "1 -> 2 -> 3 -> 4 -> 5",
    "sample_output": "5 -> 4 -> 3 -> 2 -> 1",
    "hint": "Use three pointers to reverse the linked list iteratively.",
    "hidden_inputs": [
      "1 -> 2 -> 3 -> 4 -> 5",
      "10 -> 20 -> 30",
      ""
    ],
    "hidden_outputs": [
      "5 -> 4 -> 3 -> 2 -> 1",
      "30 -> 20 -> 10",
      ""
    ]
  },
  {
    "id": 14,
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "question": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "input_format": "The input is the head of a singly linked list.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": "The number of nodes in the list is in the range [0, 5000]. -5000 <= Node.val <= 5000",
    "sample_input": "head = [1,2,3,4,5]",
    "sample_output": "[5,4,3,2,1]",
    "hint": "Use two pointers to reverse the list iteratively.",
    "hidden_inputs": [
      "[10,20,30,40,50]",
      "[1,1,1,1,1]",
      "[]"
    ],
    "hidden_outputs": [
      "[50,40,30,20,10]",
      "[1,1,1,1,1]",
      "[]"
    ]
  },
  {
    "id": 15,
    "title": "Reverse a Linked List",
    "difficulty": "Easy",
    "question": "Write a function to reverse a singly linked list.",
    "input_format": "The function will take the head of a singly linked list as input.",
    "output_format": "The function should return the head of the reversed linked list.",
    "constraints": "The linked list can have up to 1000 nodes.",
    "sample_input": "1 -> 2 -> 3 -> 4 -> 5",
    "sample_output": "5 -> 4 -> 3 -> 2 -> 1",
    "hint": "Use three pointers to reverse the linked list iteratively.",
    "hidden_inputs": [
      "1 -> 2 -> 3 -> 4 -> 5",
      "10 -> 20 -> 30",
      ""
    ],
    "hidden_outputs": [
      "5 -> 4 -> 3 -> 2 -> 1",
      "30 -> 20 -> 10",
      ""
    ]
  },
  {
    "id": 16,
    "title": "Reverse a Linked List",
    "difficulty": "Easy",
    "question": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "input_format": "The input is a singly linked list.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": "The number of nodes in the list is in the range [0, 5000]. -5000 <= Node.val <= 5000",
    "sample_input": "head = [1,2,3,4,5]",
    "sample_output": "[5,4,3,2,1]",
    "hint": "Use three pointers to reverse the linked list iteratively.",
    "hidden_inputs": [
      "head = [1,2,3,4,5,6]",
      "head = [1]",
      "head = []"
    ],
    "hidden_outputs": [
      "[6,5,4,3,2,1]",
      "[1]",
      "[]"
    ]
  },
  {
    "id": 17,
    "title": "Reverse Linked List",
    "difficulty": "Medium",
    "question": "Given the head of a singly linked list, reverse the list and return the reversed list.",
    "input_format": "The function will receive a single argument, which is the head of the linked list.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": "The number of nodes in the list is in the range [0, 5000]. -5000 <= Node.val <= 5000",
    "sample_input": "[1, 2, 3, 4, 5]",
    "sample_output": "[5, 4, 3, 2, 1]",
    "hint": "Use three pointers to reverse the linked list iteratively.",
    "hidden_inputs": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      "[1]",
      "[]"
    ],
    "hidden_outputs": [
      "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
      "[1]",
      "[]"
    ]
  },
  {
    "id": 18,
    "title": "Reverse Linked List",
    "difficulty": "Medium",
    "question": "Write a function to reverse a singly linked list.",
    "input_format": "The function will take the head of the linked list as input.",
    "output_format": "The function should return the head of the reversed linked list.",
    "constraints": "You are not allowed to use any additional data structures.",
    "sample_input": "1 -> 2 -> 3 -> 4",
    "sample_output": "4 -> 3 -> 2 -> 1",
    "hint": "Use three pointers to reverse the list iteratively.",
    "hidden_inputs": [
      "1 -> 2 -> 3 -> 4 -> 5",
      "1 -> 2",
      "1"
    ],
    "hidden_outputs": [
      "5 -> 4 -> 3 -> 2 -> 1",
      "2 -> 1",
      "1"
    ]
  },
  {
    "id": 19,
    "title": "Reverse Linked List",
    "difficulty": "Medium",
    "question": "Write a function to reverse a singly linked list.",
    "input_format": "The input is the head of a singly linked list.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": "You must reverse the linked list in-place without using extra space.",
    "sample_input": "1 -> 2 -> 3 -> 4 -> 5",
    "sample_output": "5 -> 4 -> 3 -> 2 -> 1",
    "hint": "Use three pointers to reverse the list iteratively.",
    "hidden_inputs": [
      "1 -> 2 -> 3",
      "10 -> 20 -> 30 -> 40"
    ],
    "hidden_outputs": [
      "3 -> 2 -> 1",
      "40 -> 30 -> 20 -> 10"
    ]
  },
  {
    "id": 20,
    "title": "Longest Increasing Subsequence",
    "difficulty": "Medium",
    "question": "Given an array of integers, find the length of the longest increasing subsequence.",
    "input_format": "A single line containing integers separated by spaces.",
    "output_format": "A single integer representing the length of the longest increasing subsequence.",
    "constraints": "1 ≤ length of array ≤ 2500, -10^4 ≤ array elements ≤ 10^4",
    "sample_input": "10 9 2 5 3 7 101 18",
    "sample_output": 4,
    "hint": "Use dynamic programming to keep track of the longest increasing subsequence ending at each index.",
    "hidden_inputs": [
      "5 4 3 2 1",
      "1 2 3 4 5",
      "1 1 1 1 1",
      "10 9 8 7 6 5 4 3 2 1"
    ],
    "hidden_outputs": [
      1,
      5,
      1,
      1
    ]
  },
  {
    "id": 21,
    "title": "Sum of Array Elements",
    "difficulty": "Easy",
    "question": "Given an array of integers, write a function to return the sum of all elements in the array.",
    "input_format": "An array of integers.",
    "output_format": "An integer representing the sum of the array elements.",
    "constraints": "The array can have up to 10^5 elements.",
    "sample_input": "[1, 2, 3, 4, 5]",
    "sample_output": 15,
    "hint": "Iterate through the array and accumulate the sum.",
    "hidden_inputs": [
      "[10, 20, 30, 40, 50]",
      "[-1, -2, -3, -4, -5]",
      "[0, 0, 0, 0, 0]"
    ],
    "hidden_outputs": [
      150,
      -15,
      0
    ]
  },
  {
    "id": 22,
    "title": "Sum of Array Elements",
    "difficulty": "Easy",
    "question": "Given an array of integers, write a function to return the sum of all elements in the array.",
    "input_format": "An array of integers.",
    "output_format": "An integer representing the sum of the array elements.",
    "constraints": "The array can have up to 10^5 elements. Each element is an integer between -10^9 and 10^9.",
    "sample_input": "[1, 2, 3, 4, 5]",
    "sample_output": 15,
    "hint": "Iterate through the array and accumulate the sum.",
    "hidden_inputs": [
      "[-1, -2, -3, -4, -5]",
      "[0, 0, 0, 0, 0]",
      "[1000000000, -1000000000, 0]"
    ],
    "hidden_outputs": [
      -15,
      0,
      0
    ]
  },
  {
    "id": 23,
    "title": "Two Sum",
    "difficulty": "Easy",
    "question": "Given an array of integers and a target sum, return the indices of the two numbers such that they add up to the target.",
    "input_format": "An array of integers and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": "You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "sample_input": "[2, 7, 11, 15], 9",
    "sample_output": [
      0,
      1
    ],
    "hint": "Use a hash map to store the indices of the elements as you iterate through the array.",
    "hidden_inputs": [
      "[3, 2, 4], 6",
      "[3, 3], 6"
    ],
    "hidden_outputs": [
      [
        1,
        2
      ],
      [
        0,
        1
      ]
    ]
  },
  {
    "id": 24,
    "title": "Sum of Two Numbers",
    "difficulty": "Easy",
    "question": "Given two integers, return their sum.",
    "input_format": "Two integers separated by a space.",
    "output_format": "A single integer representing the sum.",
    "constraints": "-1000 <= a, b <= 1000",
    "sample_input": "3 5",
    "sample_output": 8,
    "hint": "Use the addition operator.",
    "hidden_inputs": [
      "100 -200",
      "0 0",
      "-1000 1000"
    ],
    "hidden_outputs": [
      800,
      0,
      0
    ]
  },
  {
    "id": 25,
    "title": "Finding the Maximum Element in an Array",
    "difficulty": "Easy",
    "question": "Given an array of integers, find and return the maximum element in the array.",
    "input_format": "The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers.",
    "output_format": "Output a single integer, the maximum element in the array.",
    "constraints": "1 <= n <= 10^5, -10^9 <= array elements <= 10^9",
    "sample_input": "5\n1 3 2 5 4",
    "sample_output": 5,
    "hint": "Iterate through the array while keeping track of the maximum value encountered.",
    "hidden_inputs": [
      "10\n-1 -3 -2 -5 -4",
      "3\n10 20 30",
      "5\n1 1 1 1 1"
    ],
    "hidden_outputs": [
      -1,
      30,
      1
    ]
  },
  {
    "id": 26,
    "title": "Two Sum",
    "difficulty": "Easy",
    "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to the target.",
    "constraints": "2 <= nums.length <= 10^4, -10^9 <= nums[i] <= 10^9, -10^9 <= target <= 10^9",
    "sample_input": "[2, 7, 11, 15], 9",
    "sample_output": [
      0,
      1
    ],
    "hint": "Use a hashmap to store the difference between target and current number.",
    "hidden_inputs": [
      "[3, 2, 4], 6",
      "[3, 3], 6"
    ],
    "hidden_outputs": [
      [
        1,
        2
      ],
      [
        0,
        1
      ]
    ]
  },
  {
    "id": 27,
    "title": "Array Sum",
    "difficulty": "Easy",
    "question": "Write a function to calculate the sum of all elements in an array.",
    "input_format": "An array of integers.",
    "output_format": "An integer representing the sum of the array elements.",
    "constraints": "The array can have up to 10^6 elements.",
    "sample_input": "[1, 2, 3, 4, 5]",
    "sample_output": 15,
    "hint": "Iterate through the array and keep adding the elements to a sum variable.",
    "hidden_inputs": [
      "[10, 20, 30]",
      "[-1, -2, -3, -4]",
      "[0, 0, 0, 0]"
    ],
    "hidden_outputs": [
      60,
      -10,
      0
    ]
  },
  {
    "id": 28,
    "title": "Two Sum",
    "difficulty": "Easy",
    "question": "Given an array of integers and a target sum, return the indices of the two numbers such that they add up to the target.",
    "input_format": "An array of integers and an integer target sum.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to the target.",
    "constraints": "You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "sample_input": "[2, 7, 11, 15], 9",
    "sample_output": [
      0,
      1
    ],
    "hint": "Consider using a hash map to store the difference between the target and the current number.",
    "hidden_inputs": [
      "[3, 2, 4], 6",
      "[3, 3], 6"
    ],
    "hidden_outputs": [
      [
        1,
        2
      ],
      [
        0,
        1
      ]
    ]
  },
  {
    "id": 29,
    "title": "Sum of Two Numbers",
    "difficulty": "Easy",
    "question": "Given two integers, write a function to return their sum.",
    "input_format": "Two integers separated by a space.",
    "output_format": "A single integer representing the sum of the two input integers.",
    "constraints": "The integers will be in the range of -10^9 to 10^9.",
    "sample_input": "3 7",
    "sample_output": 10,
    "hint": "Use the addition operator to sum the two numbers.",
    "hidden_inputs": [
      "10 20",
      "100 200",
      "-50 50",
      "0 0"
    ],
    "hidden_outputs": [
      30,
      300,
      0,
      0
    ]
  },
  {
    "id": 30,
    "title": "Shortest Path in a Weighted Graph",
    "difficulty": "Medium",
    "question": "Given a weighted graph represented as an adjacency list, find the shortest path from a source node to all other nodes.",
    "input_format": "The input consists of an integer N (number of nodes), an integer M (number of edges), followed by M lines each containing three integers u, v, and w, representing an edge from node u to node v with weight w. The next line contains an integer S, the source node.",
    "output_format": "Output an array of size N where the i-th element is the shortest distance from the source node S to node i. If a node is unreachable, output -1 for that node.",
    "constraints": "1 <= N <= 1000, 0 <= M <= 10000, 0 <= u, v < N, 1 <= w <= 1000, 0 <= S < N",
    "sample_input": "5 6 0 1 10 0 2 3 1 2 1 3 2 2 3 1 4 2 4 1",
    "sample_output": [
      0,
      10,
      3,
      4,
      2
    ],
    "hint": "Use Dijkstra's algorithm to find the shortest paths in a weighted graph.",
    "hidden_inputs": [
      "5 6 0 1 10 0 2 3 1 2 1 3 2 2 3 1 4 2 4 1",
      "3 3 0 1 1 1 2 1 2 0 1"
    ],
    "hidden_outputs": [
      [
        0,
        10,
        3,
        4,
        2
      ],
      [
        0,
        1,
        2
      ]
    ]
  },
  {
    "id": 31,
    "title": "Shortest Path in a Weighted Graph",
    "difficulty": "Medium",
    "question": "Given a weighted graph and two nodes, find the shortest path between the two nodes.",
    "input_format": "First line contains two integers N (number of nodes) and M (number of edges). Next M lines contain three integers each representing an edge (u, v, w) where u and v are nodes and w is the weight of the edge. The last line contains two integers S (source node) and T (target node).",
    "output_format": "Output a single integer representing the shortest path from node S to node T. If there is no path, output -1.",
    "constraints": "1 <= N <= 1000, 1 <= M <= 10000, 1 <= w <= 1000",
    "sample_input": "5 6\n1 2 2\n1 4 1\n2 4 3\n2 5 10\n4 3 2\n4 5 8\n1 5",
    "sample_output": 11,
    "hint": "Consider using Dijkstra's algorithm for finding the shortest path in a weighted graph.",
    "hidden_inputs": [
      "5 6\n1 2 2\n1 4 1\n2 4 3\n2 5 10\n4 3 2\n4 5 8\n1 3",
      "5 6\n1 2 2\n1 4 1\n2 4 3\n2 5 10\n4 3 2\n4 5 8\n2 5"
    ],
    "hidden_outputs": [
      3,
      12
    ]
  }
]